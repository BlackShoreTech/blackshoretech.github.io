{"pageProps":{"codeSnippet":"# An island in matrix is a group of linked areas, all having the same value.\n# This code counts number of islands in a given matrix, with including diagonal\n# connections.\n\n\nclass Matrix:  # Public class to implement a graph\n    def __init__(self, row: int, col: int, graph: list[list[bool]]) -> None:\n        self.ROW = row\n        self.COL = col\n        self.graph = graph\n\n    def is_safe(self, i: int, j: int, visited: list[list[bool]]) -> bool:\n        return (\n            0 <= i < self.ROW\n            and 0 <= j < self.COL\n            and not visited[i][j]\n            and self.graph[i][j]\n        )\n\n    def diffs(self, i: int, j: int, visited: list[list[bool]]) -> None:\n        # Checking all 8 elements surrounding nth element\n        row_nbr = [-1, -1, -1, 0, 0, 1, 1, 1]  # Coordinate order\n        col_nbr = [-1, 0, 1, -1, 1, -1, 0, 1]\n        visited[i][j] = True  # Make those cells visited\n        for k in range(8):\n            if self.is_safe(i + row_nbr[k], j + col_nbr[k], visited):\n                self.diffs(i + row_nbr[k], j + col_nbr[k], visited)\n\n    def count_islands(self) -> int:  # And finally, count all islands.\n        visited = [[False for j in range(self.COL)] for i in range(self.ROW)]\n        count = 0\n        for i in range(self.ROW):\n            for j in range(self.COL):\n                if visited[i][j] is False and self.graph[i][j] == 1:\n                    self.diffs(i, j, visited)\n                    count += 1\n        return count\n"},"__N_SSG":true}