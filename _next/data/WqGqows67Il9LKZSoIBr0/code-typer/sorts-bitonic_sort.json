{"pageProps":{"codeSnippet":"\"\"\"\nPython program for Bitonic Sort.\n\nNote that this program works only when size of input is a power of 2.\n\"\"\"\nfrom __future__ import annotations\n\n\ndef comp_and_swap(array: list[int], index1: int, index2: int, direction: int) -> None:\n    \"\"\"Compare the value at given index1 and index2 of the array and swap them as per\n    the given direction.\n\n    The parameter direction indicates the sorting direction, ASCENDING(1) or\n    DESCENDING(0); if (a[i] > a[j]) agrees with the direction, then a[i] and a[j] are\n    interchanged.\n\n    >>> arr = [12, 42, -21, 1]\n    >>> comp_and_swap(arr, 1, 2, 1)\n    >>> arr\n    [12, -21, 42, 1]\n\n    >>> comp_and_swap(arr, 1, 2, 0)\n    >>> arr\n    [12, 42, -21, 1]\n\n    >>> comp_and_swap(arr, 0, 3, 1)\n    >>> arr\n    [1, 42, -21, 12]\n\n    >>> comp_and_swap(arr, 0, 3, 0)\n    >>> arr\n    [12, 42, -21, 1]\n    \"\"\"\n    if (direction == 1 and array[index1] > array[index2]) or (\n        direction == 0 and array[index1] < array[index2]\n    ):\n        array[index1], array[index2] = array[index2], array[index1]\n\n\ndef bitonic_merge(array: list[int], low: int, length: int, direction: int) -> None:\n    \"\"\"\n    It recursively sorts a bitonic sequence in ascending order, if direction = 1, and in\n    descending if direction = 0.\n    The sequence to be sorted starts at index position low, the parameter length is the\n    number of elements to be sorted.\n\n    >>> arr = [12, 42, -21, 1]\n    >>> bitonic_merge(arr, 0, 4, 1)\n    >>> arr\n    [-21, 1, 12, 42]\n\n    >>> bitonic_merge(arr, 0, 4, 0)\n    >>> arr\n    [42, 12, 1, -21]\n    \"\"\"\n    if length > 1:\n        middle = int(length / 2)\n        for i in range(low, low + middle):\n            comp_and_swap(array, i, i + middle, direction)\n        bitonic_merge(array, low, middle, direction)\n        bitonic_merge(array, low + middle, middle, direction)\n\n\ndef bitonic_sort(array: list[int], low: int, length: int, direction: int) -> None:\n    \"\"\"\n    This function first produces a bitonic sequence by recursively sorting its two\n    halves in opposite sorting orders, and then calls bitonic_merge to make them in the\n    same order.\n\n    >>> arr = [12, 34, 92, -23, 0, -121, -167, 145]\n    >>> bitonic_sort(arr, 0, 8, 1)\n    >>> arr\n    [-167, -121, -23, 0, 12, 34, 92, 145]\n\n    >>> bitonic_sort(arr, 0, 8, 0)\n    >>> arr\n    [145, 92, 34, 12, 0, -23, -121, -167]\n    \"\"\"\n    if length > 1:\n        middle = int(length / 2)\n        bitonic_sort(array, low, middle, 1)\n        bitonic_sort(array, low + middle, middle, 0)\n        bitonic_merge(array, low, length, direction)\n\n\nif __name__ == \"__main__\":\n    user_input = input(\"Enter numbers separated by a comma:\\n\").strip()\n    unsorted = [int(item.strip()) for item in user_input.split(\",\")]\n\n    bitonic_sort(unsorted, 0, len(unsorted), 1)\n    print(\"\\nSorted array in ascending order is: \", end=\"\")\n    print(*unsorted, sep=\", \")\n\n    bitonic_merge(unsorted, 0, len(unsorted), 0)\n    print(\"Sorted array in descending order is: \", end=\"\")\n    print(*unsorted, sep=\", \")\n"},"__N_SSG":true}