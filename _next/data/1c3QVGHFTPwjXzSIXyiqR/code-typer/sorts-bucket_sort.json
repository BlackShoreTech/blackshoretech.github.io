{"pageProps":{"codeSnippet":"#!/usr/bin/env python3\n\"\"\"\nIllustrate how to implement bucket sort algorithm.\n\nAuthor: OMKAR PATHAK\nThis program will illustrate how to implement bucket sort algorithm\n\nWikipedia says: Bucket sort, or bin sort, is a sorting algorithm that works\nby distributing the elements of an array into a number of buckets.\nEach bucket is then sorted individually, either using a different sorting\nalgorithm, or by recursively applying the bucket sorting algorithm. It is a\ndistribution sort, and is a cousin of radix sort in the most to least\nsignificant digit flavour.\nBucket sort is a generalization of pigeonhole sort. Bucket sort can be\nimplemented with comparisons and therefore can also be considered a\ncomparison sort algorithm. The computational complexity estimates involve the\nnumber of buckets.\n\nTime Complexity of Solution:\nWorst case scenario occurs when all the elements are placed in a single bucket.\nThe overall performance would then be dominated by the algorithm used to sort each\nbucket. In this case, O(n log n), because of TimSort\n\nAverage Case O(n + (n^2)/k + k), where k is the number of buckets\n\nIf k = O(n), time complexity is O(n)\n\nSource: https://en.wikipedia.org/wiki/Bucket_sort\n\"\"\"\nfrom __future__ import annotations\n\n\ndef bucket_sort(my_list: list) -> list:\n    \"\"\"\n    >>> data = [-1, 2, -5, 0]\n    >>> bucket_sort(data) == sorted(data)\n    True\n    >>> data = [9, 8, 7, 6, -12]\n    >>> bucket_sort(data) == sorted(data)\n    True\n    >>> data = [.4, 1.2, .1, .2, -.9]\n    >>> bucket_sort(data) == sorted(data)\n    True\n    >>> bucket_sort([]) == sorted([])\n    True\n    >>> import random\n    >>> collection = random.sample(range(-50, 50), 50)\n    >>> bucket_sort(collection) == sorted(collection)\n    True\n    \"\"\"\n    if len(my_list) == 0:\n        return []\n    min_value, max_value = min(my_list), max(my_list)\n    bucket_count = int(max_value - min_value) + 1\n    buckets: list[list] = [[] for _ in range(bucket_count)]\n\n    for i in my_list:\n        buckets[int(i - min_value)].append(i)\n\n    return [v for bucket in buckets for v in sorted(bucket)]\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n\n    testmod()\n    assert bucket_sort([4, 5, 3, 2, 1]) == [1, 2, 3, 4, 5]\n    assert bucket_sort([0, 1, -10, 15, 2, -2]) == [-10, -2, 0, 1, 2, 15]\n"},"__N_SSG":true}