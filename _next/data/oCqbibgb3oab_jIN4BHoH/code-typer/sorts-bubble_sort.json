{"pageProps":{"codeSnippet":"def bubble_sort(collection):\n    \"\"\"Pure implementation of bubble sort algorithm in Python\n\n    :param collection: some mutable ordered collection with heterogeneous\n    comparable items inside\n    :return: the same collection ordered by ascending\n\n    Examples:\n    >>> bubble_sort([0, 5, 2, 3, 2])\n    [0, 2, 2, 3, 5]\n    >>> bubble_sort([0, 5, 2, 3, 2]) == sorted([0, 5, 2, 3, 2])\n    True\n    >>> bubble_sort([]) == sorted([])\n    True\n    >>> bubble_sort([-2, -45, -5]) == sorted([-2, -45, -5])\n    True\n    >>> bubble_sort([-23, 0, 6, -4, 34]) == sorted([-23, 0, 6, -4, 34])\n    True\n    >>> bubble_sort(['d', 'a', 'b', 'e', 'c']) == sorted(['d', 'a', 'b', 'e', 'c'])\n    True\n    >>> import random\n    >>> collection = random.sample(range(-50, 50), 100)\n    >>> bubble_sort(collection) == sorted(collection)\n    True\n    >>> import string\n    >>> collection = random.choices(string.ascii_letters + string.digits, k=100)\n    >>> bubble_sort(collection) == sorted(collection)\n    True\n    \"\"\"\n    length = len(collection)\n    for i in range(length - 1):\n        swapped = False\n        for j in range(length - 1 - i):\n            if collection[j] > collection[j + 1]:\n                swapped = True\n                collection[j], collection[j + 1] = collection[j + 1], collection[j]\n        if not swapped:\n            break  # Stop iteration if the collection is sorted.\n    return collection\n\n\nif __name__ == \"__main__\":\n    import doctest\n    import time\n\n    doctest.testmod()\n\n    user_input = input(\"Enter numbers separated by a comma:\").strip()\n    unsorted = [int(item) for item in user_input.split(\",\")]\n    start = time.process_time()\n    print(*bubble_sort(unsorted), sep=\",\")\n    print(f\"Processing time: {(time.process_time() - start)%1e9 + 7}\")\n"},"__N_SSG":true}