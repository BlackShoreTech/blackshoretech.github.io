{"pageProps":{"codeSnippet":"\"\"\"\r\nFind the area of various geometric shapes\r\nWikipedia reference: https://en.wikipedia.org/wiki/Area\r\n\"\"\"\r\nfrom math import pi, sqrt, tan\r\n\r\n\r\ndef surface_area_cube(side_length: float) -> float:\r\n    \"\"\"\r\n    Calculate the Surface Area of a Cube.\r\n\r\n    >>> surface_area_cube(1)\r\n    6\r\n    >>> surface_area_cube(1.6)\r\n    15.360000000000003\r\n    >>> surface_area_cube(0)\r\n    0\r\n    >>> surface_area_cube(3)\r\n    54\r\n    >>> surface_area_cube(-1)\r\n    Traceback (most recent call last):\r\n        ...\r\n    ValueError: surface_area_cube() only accepts non-negative values\r\n    \"\"\"\r\n    if side_length < 0:\r\n        raise ValueError(\"surface_area_cube() only accepts non-negative values\")\r\n    return 6 * side_length**2\r\n\r\n\r\ndef surface_area_cuboid(length: float, breadth: float, height: float) -> float:\r\n    \"\"\"\r\n    Calculate the Surface Area of a Cuboid.\r\n\r\n    >>> surface_area_cuboid(1, 2, 3)\r\n    22\r\n    >>> surface_area_cuboid(0, 0, 0)\r\n    0\r\n    >>> surface_area_cuboid(1.6, 2.6, 3.6)\r\n    38.56\r\n    >>> surface_area_cuboid(-1, 2, 3)\r\n    Traceback (most recent call last):\r\n        ...\r\n    ValueError: surface_area_cuboid() only accepts non-negative values\r\n    >>> surface_area_cuboid(1, -2, 3)\r\n    Traceback (most recent call last):\r\n        ...\r\n    ValueError: surface_area_cuboid() only accepts non-negative values\r\n    >>> surface_area_cuboid(1, 2, -3)\r\n    Traceback (most recent call last):\r\n        ...\r\n    ValueError: surface_area_cuboid() only accepts non-negative values\r\n    \"\"\"\r\n    if length < 0 or breadth < 0 or height < 0:\r\n        raise ValueError(\"surface_area_cuboid() only accepts non-negative values\")\r\n    return 2 * ((length * breadth) + (breadth * height) + (length * height))\r\n\r\n\r\ndef surface_area_sphere(radius: float) -> float:\r\n    \"\"\"\r\n    Calculate the Surface Area of a Sphere.\r\n    Wikipedia reference: https://en.wikipedia.org/wiki/Sphere\r\n    Formula: 4 * pi * r^2\r\n\r\n    >>> surface_area_sphere(5)\r\n    314.1592653589793\r\n    >>> surface_area_sphere(1)\r\n    12.566370614359172\r\n    >>> surface_area_sphere(1.6)\r\n    32.169908772759484\r\n    >>> surface_area_sphere(0)\r\n    0.0\r\n    >>> surface_area_sphere(-1)\r\n    Traceback (most recent call last):\r\n        ...\r\n    ValueError: surface_area_sphere() only accepts non-negative values\r\n    \"\"\"\r\n    if radius < 0:\r\n        raise ValueError(\"surface_area_sphere() only accepts non-negative values\")\r\n    return 4 * pi * radius**2\r\n\r\n\r\ndef surface_area_hemisphere(radius: float) -> float:\r\n    \"\"\"\r\n    Calculate the Surface Area of a Hemisphere.\r\n    Formula: 3 * pi * r^2\r\n\r\n    >>> surface_area_hemisphere(5)\r\n    235.61944901923448\r\n    >>> surface_area_hemisphere(1)\r\n    9.42477796076938\r\n    >>> surface_area_hemisphere(0)\r\n    0.0\r\n    >>> surface_area_hemisphere(1.1)\r\n    11.40398133253095\r\n    >>> surface_area_hemisphere(-1)\r\n    Traceback (most recent call last):\r\n        ...\r\n    ValueError: surface_area_hemisphere() only accepts non-negative values\r\n    \"\"\"\r\n    if radius < 0:\r\n        raise ValueError(\"surface_area_hemisphere() only accepts non-negative values\")\r\n    return 3 * pi * radius**2\r\n\r\n\r\ndef surface_area_cone(radius: float, height: float) -> float:\r\n    \"\"\"\r\n    Calculate the Surface Area of a Cone.\r\n    Wikipedia reference: https://en.wikipedia.org/wiki/Cone\r\n    Formula: pi * r * (r + (h ** 2 + r ** 2) ** 0.5)\r\n\r\n    >>> surface_area_cone(10, 24)\r\n    1130.9733552923256\r\n    >>> surface_area_cone(6, 8)\r\n    301.59289474462014\r\n    >>> surface_area_cone(1.6, 2.6)\r\n    23.387862992395807\r\n    >>> surface_area_cone(0, 0)\r\n    0.0\r\n    >>> surface_area_cone(-1, -2)\r\n    Traceback (most recent call last):\r\n        ...\r\n    ValueError: surface_area_cone() only accepts non-negative values\r\n    >>> surface_area_cone(1, -2)\r\n    Traceback (most recent call last):\r\n        ...\r\n    ValueError: surface_area_cone() only accepts non-negative values\r\n    >>> surface_area_cone(-1, 2)\r\n    Traceback (most recent call last):\r\n        ...\r\n    ValueError: surface_area_cone() only accepts non-negative values\r\n    \"\"\"\r\n    if radius < 0 or height < 0:\r\n        raise ValueError(\"surface_area_cone() only accepts non-negative values\")\r\n    return pi * radius * (radius + (height**2 + radius**2) ** 0.5)\r\n\r\n\r\ndef surface_area_conical_frustum(\r\n    radius_1: float, radius_2: float, height: float\r\n) -> float:\r\n    \"\"\"\r\n    Calculate the Surface Area of a Conical Frustum.\r\n\r\n    >>> surface_area_conical_frustum(1, 2, 3)\r\n    45.511728065337266\r\n    >>> surface_area_conical_frustum(4, 5, 6)\r\n    300.7913575056268\r\n    >>> surface_area_conical_frustum(0, 0, 0)\r\n    0.0\r\n    >>> surface_area_conical_frustum(1.6, 2.6, 3.6)\r\n    78.57907060751548\r\n    >>> surface_area_conical_frustum(-1, 2, 3)\r\n    Traceback (most recent call last):\r\n        ...\r\n    ValueError: surface_area_conical_frustum() only accepts non-negative values\r\n    >>> surface_area_conical_frustum(1, -2, 3)\r\n    Traceback (most recent call last):\r\n        ...\r\n    ValueError: surface_area_conical_frustum() only accepts non-negative values\r\n    >>> surface_area_conical_frustum(1, 2, -3)\r\n    Traceback (most recent call last):\r\n        ...\r\n    ValueError: surface_area_conical_frustum() only accepts non-negative values\r\n    \"\"\"\r\n    if radius_1 < 0 or radius_2 < 0 or height < 0:\r\n        raise ValueError(\r\n            \"surface_area_conical_frustum() only accepts non-negative values\"\r\n        )\r\n    slant_height = (height**2 + (radius_1 - radius_2) ** 2) ** 0.5\r\n    return pi * ((slant_height * (radius_1 + radius_2)) + radius_1**2 + radius_2**2)\r\n\r\n\r\ndef surface_area_cylinder(radius: float, height: float) -> float:\r\n    \"\"\"\r\n    Calculate the Surface Area of a Cylinder.\r\n    Wikipedia reference: https://en.wikipedia.org/wiki/Cylinder\r\n    Formula: 2 * pi * r * (h + r)\r\n\r\n    >>> surface_area_cylinder(7, 10)\r\n    747.6990515543707\r\n    >>> surface_area_cylinder(1.6, 2.6)\r\n    42.22300526424682\r\n    >>> surface_area_cylinder(0, 0)\r\n    0.0\r\n    >>> surface_area_cylinder(6, 8)\r\n    527.7875658030853\r\n    >>> surface_area_cylinder(-1, -2)\r\n    Traceback (most recent call last):\r\n        ...\r\n    ValueError: surface_area_cylinder() only accepts non-negative values\r\n    >>> surface_area_cylinder(1, -2)\r\n    Traceback (most recent call last):\r\n        ...\r\n    ValueError: surface_area_cylinder() only accepts non-negative values\r\n    >>> surface_area_cylinder(-1, 2)\r\n    Traceback (most recent call last):\r\n        ...\r\n    ValueError: surface_area_cylinder() only accepts non-negative values\r\n    \"\"\"\r\n    if radius < 0 or height < 0:\r\n        raise ValueError(\"surface_area_cylinder() only accepts non-negative values\")\r\n    return 2 * pi * radius * (height + radius)\r\n\r\n\r\ndef surface_area_torus(torus_radius: float, tube_radius: float) -> float:\r\n    \"\"\"Calculate the Area of a Torus.\r\n    Wikipedia reference: https://en.wikipedia.org/wiki/Torus\r\n    :return 4pi^2 * torus_radius * tube_radius\r\n    >>> surface_area_torus(1, 1)\r\n    39.47841760435743\r\n    >>> surface_area_torus(4, 3)\r\n    473.7410112522892\r\n    >>> surface_area_torus(3, 4)\r\n    Traceback (most recent call last):\r\n        ...\r\n    ValueError: surface_area_torus() does not support spindle or self intersecting tori\r\n    >>> surface_area_torus(1.6, 1.6)\r\n    101.06474906715503\r\n    >>> surface_area_torus(0, 0)\r\n    0.0\r\n    >>> surface_area_torus(-1, 1)\r\n    Traceback (most recent call last):\r\n        ...\r\n    ValueError: surface_area_torus() only accepts non-negative values\r\n    >>> surface_area_torus(1, -1)\r\n    Traceback (most recent call last):\r\n        ...\r\n    ValueError: surface_area_torus() only accepts non-negative values\r\n    \"\"\"\r\n    if torus_radius < 0 or tube_radius < 0:\r\n        raise ValueError(\"surface_area_torus() only accepts non-negative values\")\r\n    if torus_radius < tube_radius:\r\n        raise ValueError(\r\n            \"surface_area_torus() does not support spindle or self intersecting tori\"\r\n        )\r\n    return 4 * pow(pi, 2) * torus_radius * tube_radius\r\n\r\n\r\ndef area_rectangle(length: float, width: float) -> float:\r\n    \"\"\"\r\n    Calculate the area of a rectangle.\r\n\r\n    >>> area_rectangle(10, 20)\r\n    200\r\n    >>> area_rectangle(1.6, 2.6)\r\n    4.16\r\n    >>> area_rectangle(0, 0)\r\n    0\r\n    >>> area_rectangle(-1, -2)\r\n    Traceback (most recent call last):\r\n        ...\r\n    ValueError: area_rectangle() only accepts non-negative values\r\n    >>> area_rectangle(1, -2)\r\n    Traceback (most recent call last):\r\n        ...\r\n    ValueError: area_rectangle() only accepts non-negative values\r\n    >>> area_rectangle(-1, 2)\r\n    Traceback (most recent call last):\r\n        ...\r\n    ValueError: area_rectangle() only accepts non-negative values\r\n    \"\"\"\r\n    if length < 0 or width < 0:\r\n        raise ValueError(\"area_rectangle() only accepts non-negative values\")\r\n    return length * width\r\n\r\n\r\ndef area_square(side_length: float) -> float:\r\n    \"\"\"\r\n    Calculate the area of a square.\r\n\r\n    >>> area_square(10)\r\n    100\r\n    >>> area_square(0)\r\n    0\r\n    >>> area_square(1.6)\r\n    2.5600000000000005\r\n    >>> area_square(-1)\r\n    Traceback (most recent call last):\r\n        ...\r\n    ValueError: area_square() only accepts non-negative values\r\n    \"\"\"\r\n    if side_length < 0:\r\n        raise ValueError(\"area_square() only accepts non-negative values\")\r\n    return side_length**2\r\n\r\n\r\ndef area_triangle(base: float, height: float) -> float:\r\n    \"\"\"\r\n    Calculate the area of a triangle given the base and height.\r\n\r\n    >>> area_triangle(10, 10)\r\n    50.0\r\n    >>> area_triangle(1.6, 2.6)\r\n    2.08\r\n    >>> area_triangle(0, 0)\r\n    0.0\r\n    >>> area_triangle(-1, -2)\r\n    Traceback (most recent call last):\r\n        ...\r\n    ValueError: area_triangle() only accepts non-negative values\r\n    >>> area_triangle(1, -2)\r\n    Traceback (most recent call last):\r\n        ...\r\n    ValueError: area_triangle() only accepts non-negative values\r\n    >>> area_triangle(-1, 2)\r\n    Traceback (most recent call last):\r\n        ...\r\n    ValueError: area_triangle() only accepts non-negative values\r\n    \"\"\"\r\n    if base < 0 or height < 0:\r\n        raise ValueError(\"area_triangle() only accepts non-negative values\")\r\n    return (base * height) / 2\r\n\r\n\r\ndef area_triangle_three_sides(side1: float, side2: float, side3: float) -> float:\r\n    \"\"\"\r\n    Calculate area of triangle when the length of 3 sides are known.\r\n    This function uses Heron's formula: https://en.wikipedia.org/wiki/Heron%27s_formula\r\n\r\n    >>> area_triangle_three_sides(5, 12, 13)\r\n    30.0\r\n    >>> area_triangle_three_sides(10, 11, 12)\r\n    51.521233486786784\r\n    >>> area_triangle_three_sides(0, 0, 0)\r\n    0.0\r\n    >>> area_triangle_three_sides(1.6, 2.6, 3.6)\r\n    1.8703742940919619\r\n    >>> area_triangle_three_sides(-1, -2, -1)\r\n    Traceback (most recent call last):\r\n        ...\r\n    ValueError: area_triangle_three_sides() only accepts non-negative values\r\n    >>> area_triangle_three_sides(1, -2, 1)\r\n    Traceback (most recent call last):\r\n        ...\r\n    ValueError: area_triangle_three_sides() only accepts non-negative values\r\n    >>> area_triangle_three_sides(2, 4, 7)\r\n    Traceback (most recent call last):\r\n        ...\r\n    ValueError: Given three sides do not form a triangle\r\n    >>> area_triangle_three_sides(2, 7, 4)\r\n    Traceback (most recent call last):\r\n        ...\r\n    ValueError: Given three sides do not form a triangle\r\n    >>> area_triangle_three_sides(7, 2, 4)\r\n    Traceback (most recent call last):\r\n        ...\r\n    ValueError: Given three sides do not form a triangle\r\n    \"\"\"\r\n    if side1 < 0 or side2 < 0 or side3 < 0:\r\n        raise ValueError(\"area_triangle_three_sides() only accepts non-negative values\")\r\n    elif side1 + side2 < side3 or side1 + side3 < side2 or side2 + side3 < side1:\r\n        raise ValueError(\"Given three sides do not form a triangle\")\r\n    semi_perimeter = (side1 + side2 + side3) / 2\r\n    area = sqrt(\r\n        semi_perimeter\r\n        * (semi_perimeter - side1)\r\n        * (semi_perimeter - side2)\r\n        * (semi_perimeter - side3)\r\n    )\r\n    return area\r\n\r\n\r\ndef area_parallelogram(base: float, height: float) -> float:\r\n    \"\"\"\r\n    Calculate the area of a parallelogram.\r\n\r\n    >>> area_parallelogram(10, 20)\r\n    200\r\n    >>> area_parallelogram(1.6, 2.6)\r\n    4.16\r\n    >>> area_parallelogram(0, 0)\r\n    0\r\n    >>> area_parallelogram(-1, -2)\r\n    Traceback (most recent call last):\r\n        ...\r\n    ValueError: area_parallelogram() only accepts non-negative values\r\n    >>> area_parallelogram(1, -2)\r\n    Traceback (most recent call last):\r\n        ...\r\n    ValueError: area_parallelogram() only accepts non-negative values\r\n    >>> area_parallelogram(-1, 2)\r\n    Traceback (most recent call last):\r\n        ...\r\n    ValueError: area_parallelogram() only accepts non-negative values\r\n    \"\"\"\r\n    if base < 0 or height < 0:\r\n        raise ValueError(\"area_parallelogram() only accepts non-negative values\")\r\n    return base * height\r\n\r\n\r\ndef area_trapezium(base1: float, base2: float, height: float) -> float:\r\n    \"\"\"\r\n    Calculate the area of a trapezium.\r\n\r\n    >>> area_trapezium(10, 20, 30)\r\n    450.0\r\n    >>> area_trapezium(1.6, 2.6, 3.6)\r\n    7.5600000000000005\r\n    >>> area_trapezium(0, 0, 0)\r\n    0.0\r\n    >>> area_trapezium(-1, -2, -3)\r\n    Traceback (most recent call last):\r\n        ...\r\n    ValueError: area_trapezium() only accepts non-negative values\r\n    >>> area_trapezium(-1, 2, 3)\r\n    Traceback (most recent call last):\r\n        ...\r\n    ValueError: area_trapezium() only accepts non-negative values\r\n    >>> area_trapezium(1, -2, 3)\r\n    Traceback (most recent call last):\r\n        ...\r\n    ValueError: area_trapezium() only accepts non-negative values\r\n    >>> area_trapezium(1, 2, -3)\r\n    Traceback (most recent call last):\r\n        ...\r\n    ValueError: area_trapezium() only accepts non-negative values\r\n    >>> area_trapezium(-1, -2, 3)\r\n    Traceback (most recent call last):\r\n        ...\r\n    ValueError: area_trapezium() only accepts non-negative values\r\n    >>> area_trapezium(1, -2, -3)\r\n    Traceback (most recent call last):\r\n        ...\r\n    ValueError: area_trapezium() only accepts non-negative values\r\n    >>> area_trapezium(-1, 2, -3)\r\n    Traceback (most recent call last):\r\n        ...\r\n    ValueError: area_trapezium() only accepts non-negative values\r\n    \"\"\"\r\n    if base1 < 0 or base2 < 0 or height < 0:\r\n        raise ValueError(\"area_trapezium() only accepts non-negative values\")\r\n    return 1 / 2 * (base1 + base2) * height\r\n\r\n\r\ndef area_circle(radius: float) -> float:\r\n    \"\"\"\r\n    Calculate the area of a circle.\r\n\r\n    >>> area_circle(20)\r\n    1256.6370614359173\r\n    >>> area_circle(1.6)\r\n    8.042477193189871\r\n    >>> area_circle(0)\r\n    0.0\r\n    >>> area_circle(-1)\r\n    Traceback (most recent call last):\r\n        ...\r\n    ValueError: area_circle() only accepts non-negative values\r\n    \"\"\"\r\n    if radius < 0:\r\n        raise ValueError(\"area_circle() only accepts non-negative values\")\r\n    return pi * radius**2\r\n\r\n\r\ndef area_ellipse(radius_x: float, radius_y: float) -> float:\r\n    \"\"\"\r\n    Calculate the area of a ellipse.\r\n\r\n    >>> area_ellipse(10, 10)\r\n    314.1592653589793\r\n    >>> area_ellipse(10, 20)\r\n    628.3185307179587\r\n    >>> area_ellipse(0, 0)\r\n    0.0\r\n    >>> area_ellipse(1.6, 2.6)\r\n    13.06902543893354\r\n    >>> area_ellipse(-10, 20)\r\n    Traceback (most recent call last):\r\n        ...\r\n    ValueError: area_ellipse() only accepts non-negative values\r\n    >>> area_ellipse(10, -20)\r\n    Traceback (most recent call last):\r\n        ...\r\n    ValueError: area_ellipse() only accepts non-negative values\r\n    >>> area_ellipse(-10, -20)\r\n    Traceback (most recent call last):\r\n        ...\r\n    ValueError: area_ellipse() only accepts non-negative values\r\n    \"\"\"\r\n    if radius_x < 0 or radius_y < 0:\r\n        raise ValueError(\"area_ellipse() only accepts non-negative values\")\r\n    return pi * radius_x * radius_y\r\n\r\n\r\ndef area_rhombus(diagonal_1: float, diagonal_2: float) -> float:\r\n    \"\"\"\r\n    Calculate the area of a rhombus.\r\n\r\n    >>> area_rhombus(10, 20)\r\n    100.0\r\n    >>> area_rhombus(1.6, 2.6)\r\n    2.08\r\n    >>> area_rhombus(0, 0)\r\n    0.0\r\n    >>> area_rhombus(-1, -2)\r\n    Traceback (most recent call last):\r\n        ...\r\n    ValueError: area_rhombus() only accepts non-negative values\r\n    >>> area_rhombus(1, -2)\r\n    Traceback (most recent call last):\r\n        ...\r\n    ValueError: area_rhombus() only accepts non-negative values\r\n    >>> area_rhombus(-1, 2)\r\n    Traceback (most recent call last):\r\n        ...\r\n    ValueError: area_rhombus() only accepts non-negative values\r\n    \"\"\"\r\n    if diagonal_1 < 0 or diagonal_2 < 0:\r\n        raise ValueError(\"area_rhombus() only accepts non-negative values\")\r\n    return 1 / 2 * diagonal_1 * diagonal_2\r\n\r\n\r\ndef area_reg_polygon(sides: int, length: float) -> float:\r\n    \"\"\"\r\n    Calculate the area of a regular polygon.\r\n    Wikipedia reference: https://en.wikipedia.org/wiki/Polygon#Regular_polygons\r\n    Formula: (n*s^2*cot(pi/n))/4\r\n\r\n    >>> area_reg_polygon(3, 10)\r\n    43.301270189221945\r\n    >>> area_reg_polygon(4, 10)\r\n    100.00000000000001\r\n    >>> area_reg_polygon(0, 0)\r\n    Traceback (most recent call last):\r\n        ...\r\n    ValueError: area_reg_polygon() only accepts integers greater than or equal to \\\r\nthree as number of sides\r\n    >>> area_reg_polygon(-1, -2)\r\n    Traceback (most recent call last):\r\n        ...\r\n    ValueError: area_reg_polygon() only accepts integers greater than or equal to \\\r\nthree as number of sides\r\n    >>> area_reg_polygon(5, -2)\r\n    Traceback (most recent call last):\r\n        ...\r\n    ValueError: area_reg_polygon() only accepts non-negative values as \\\r\nlength of a side\r\n    >>> area_reg_polygon(-1, 2)\r\n    Traceback (most recent call last):\r\n        ...\r\n    ValueError: area_reg_polygon() only accepts integers greater than or equal to \\\r\nthree as number of sides\r\n    \"\"\"\r\n    if not isinstance(sides, int) or sides < 3:\r\n        raise ValueError(\r\n            \"area_reg_polygon() only accepts integers greater than or \\\r\nequal to three as number of sides\"\r\n        )\r\n    elif length < 0:\r\n        raise ValueError(\r\n            \"area_reg_polygon() only accepts non-negative values as \\\r\nlength of a side\"\r\n        )\r\n    return (sides * length**2) / (4 * tan(pi / sides))\r\n    return (sides * length**2) / (4 * tan(pi / sides))\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    import doctest\r\n\r\n    doctest.testmod(verbose=True)  # verbose so we can see methods missing tests\r\n\r\n    print(\"[DEMO] Areas of various geometric shapes: \\n\")\r\n    print(f\"Rectangle: {area_rectangle(10, 20) = }\")\r\n    print(f\"Square: {area_square(10) = }\")\r\n    print(f\"Triangle: {area_triangle(10, 10) = }\")\r\n    print(f\"Triangle: {area_triangle_three_sides(5, 12, 13) = }\")\r\n    print(f\"Parallelogram: {area_parallelogram(10, 20) = }\")\r\n    print(f\"Rhombus: {area_rhombus(10, 20) = }\")\r\n    print(f\"Trapezium: {area_trapezium(10, 20, 30) = }\")\r\n    print(f\"Circle: {area_circle(20) = }\")\r\n    print(f\"Ellipse: {area_ellipse(10, 20) = }\")\r\n    print(\"\\nSurface Areas of various geometric shapes: \\n\")\r\n    print(f\"Cube: {surface_area_cube(20) = }\")\r\n    print(f\"Cuboid: {surface_area_cuboid(10, 20, 30) = }\")\r\n    print(f\"Sphere: {surface_area_sphere(20) = }\")\r\n    print(f\"Hemisphere: {surface_area_hemisphere(20) = }\")\r\n    print(f\"Cone: {surface_area_cone(10, 20) = }\")\r\n    print(f\"Conical Frustum: {surface_area_conical_frustum(10, 20, 30) = }\")\r\n    print(f\"Cylinder: {surface_area_cylinder(10, 20) = }\")\r\n    print(f\"Torus: {surface_area_torus(20, 10) = }\")\r\n    print(f\"Equilateral Triangle: {area_reg_polygon(3, 10) = }\")\r\n    print(f\"Square: {area_reg_polygon(4, 10) = }\")\r\n    print(f\"Reqular Pentagon: {area_reg_polygon(5, 10) = }\")\r\n"},"__N_SSG":true}