{"pageProps":{"frontmatter":{"title":"Virtual CAN-BUS simulator (Virtual ECU)","date":"May 1, 2020","excerpt":"","author":"Brendan","cover_image":"https://blog.brendanscullion.com/_next/image?url=https%3A%2F%2Fcdn.hashnode.com%2Fres%2Fhashnode%2Fimage%2Funsplash%2FKVPRz5JEDbc%2Fupload%2Fv1652106957021%2FtZQ5ZUVIo.jpeg%3Fw%3D1600%26h%3D840%26fit%3Dcrop%26crop%3Dentropy%26auto%3Dcompress%2Cformat%26format%3Dwebp&w=1920&q=75"},"slug":"canbus_simulator","content":"\nWhile developing some monitoring application for a Raspberry-Pi car computer, I found that writing code on my laptop while sitting in the front seat of my car is not the most productive way to do things. What's needed is some sort of virtual ECU, and i have just the solution. \n\n#### In short my solution is this:\n  1. Take a can recording of the car starting up and running for a little while\n  2. Create a virtual can network device\n  3. replay the recording on an infinite loop\n  4. package it up nicely so that I can start the simulation on demand\n![cansim-demo-2.gif](https://cdn.hashnode.com/res/hashnode/image/upload/v1652107126520/ODP7DeD6f.gif)\n\n1. ### Record Some Data\nThis may be different for other cars but for my disco 3, I need to wait 5 minutes after turning the car off for the ECU to go to sleep. \nOnce the ECU is asleep I start the recording. \n```bash\ncandump can0 -l\n```\nI start the car and let it run for 5 minutes or so, later on I’ll redo this and take the car for a spin around the town but for now this is enough for me. so I `CTL-C` the recording and I get a file named `candump-2020-04-14_202239.log`. I rename this to something with a little more meaning (“candump-landrover-discovery-3-vcan0.log”)\n\n2. ### Configure Virtual CAN device\nThe vcan device is basically another network device so configuring it is pretty straight forward. \n```bash\nsudo modprobe vcan\nsudo ip link add dev vcan0 type vcan\nsudo ip link set up vcan0\n```\n3. ### Replay CAN Recording\nNow i just need to replay my recording back into vcan0.\n```bash\ncanplayer -I candump-landrover-discovery-3-vcan0.log -l i vcan0=slcan0\n```\nBy default canplayer will replay the file via the same device that it was captured on (`slcan0`). to get around this i need to specify the `vcan0` as new device, hence `vcan0=slcan0`\n\n4. ### Create cansim service\nFinally I want to be able to start the simulation on demand. I do this by creating a systemd service config\n\n  ```bash\nsudo vim /lib/systemd/system/cansim.service\n```\n\n```bash\n[Unit]\nDescription=Canbus simulator\nAfter=network.target\n\n[Service]\nLabel=cansim\nType=exec\nEnvironment=CANDATA=/mnt/DATA/sharedfolder/candump-landrover-discovery-3-vcan0.log\nEnvironment=LOG_INTERFACE=slcan0\n\nExecStartPre=modprobe vcan\nExecStartPre=-ip link add dev vcan0 type vcan \nExecStartPre=ip link set up vcan0\nExecStart=canplayer -I $CANDATA -l i vcan0=${LOG_INTERFACE}\n\nExecStop=/bin/kill -s TERM $MAINPID\nPIDFile=/run/cansim/cansim.pid\nTimeoutStopSec=0\n```\nNow I can start the simulation whenever I need it with\n```bash\nsystemctl start cansim\n```"},"__N_SSG":true}